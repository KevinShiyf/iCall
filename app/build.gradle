apply plugin: 'com.android.application'

android {
    compileSdkVersion project.ext.compileSdk
    buildToolsVersion project.ext.buildTools

    defaultConfig {
        applicationId "com.icall.free"
        minSdkVersion project.ext.minSdk
        targetSdkVersion project.ext.targetSdk
        versionCode project.ext.versionCode
        versionName project.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        ndk {
//             设置支持的 SO 库构架
            abiFilters 'armeabi'//, 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'//, 'mips', 'mips64'
        }
    }
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//    }

    lintOptions {
        abortOnError false
    }

    dependencies {
        implementation 'com.facebook.android:account-kit-sdk:4.+'
        implementation "com.android.support:support-v4:25.3.1"
        implementation 'com.google.android.gms:play-services-base:11.8.0'
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi', 'armeabi-v7a', 'x86'
            universalApk true
        }
    }

    signingConfigs {
        config {
            keyAlias 'key_icall'
            keyPassword 'icall1q2w3e'
            storeFile file('/Users/Kevin/Desktop/icall.jks')
            storePassword 'icall1q2w3e'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        //设置编译打包时的文件名
//        applicationVariants.all { variant ->
//            variant.outputs.each { output ->
//                outputFile = output.outputFile
//                if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                    // apk_渠道名-版本号-版本名称-编译时间.apk
//                    def fileName = "icall_build${defaultConfig.versionCode}_${defaultConfig.versionName}_${releaseTime()}.apk"
//                    output.outputFile = new File(outputFile.parent, fileName)
//                }
//            }
//        }
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "icall_build${defaultConfig.versionCode}_${defaultConfig.versionName}_${releaseTime()}.apk"
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
//    compile files('libs/LoonAndroid.jar')
//    compile files('libs/android_slidingjar.jar')
    compile 'com.google.code.gson:gson:2.6.2'
}


/**
 * 获取当前时间
 * @return
 */
def releaseTime() {
//    return "20180811"
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT-00:00"))
}

/**
 * 当Release版打包任务执行时添加任务
 */
tasks.whenTaskAdded { task ->
    if (task.name.matches('assemble.*?Release')) {
        task.dependsOn 'bumpVersionCode'
    }
}

/**
 * 匹配conf.gradle中的versionCode
 * @param file
 */
void bumpVersionCodeInFile(File file) {
    def text = file.text
    def matcher = (text =~ /versionCode      : ([0-9]+)/)
    if (matcher.size() != 1 || !matcher.hasGroup()) {
        throw new GradleException("Could not find versionCode in conf.gradle")
    }
    def String versionCodeStr = matcher[0][1]
    def versionCode = Integer.valueOf(versionCodeStr)
    def newVersionCode = versionCode + 1
    def newContent = matcher.replaceFirst("versionCode      : " + newVersionCode)
    file.write(newContent)
}

/**
 * 读取conf.gradle文件
 */
task('bumpVersionCode') << {
    def appGradleFile = file('./../conf.gradle')
    if (appGradleFile.canRead()) {
        bumpVersionCodeInFile(appGradleFile)
    } else {
        throw new GradleException("Could not read conf.gradle");
    }
}