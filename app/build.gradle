apply plugin: 'com.android.application'

android {
    compileSdkVersion project.ext.compileSdk
    buildToolsVersion project.ext.buildTools

    defaultConfig {
        applicationId "com.icall.free"
        minSdkVersion project.ext.minSdk
        targetSdkVersion project.ext.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//    }

    lintOptions {
        abortOnError false
    }

    dependencies {
        implementation 'com.facebook.android:account-kit-sdk:4.+'
        implementation "com.android.support:support-v4:25.3.1"
        implementation 'com.google.android.gms:play-services-base:11.8.0'
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi', 'armeabi-v7a', 'x86'
            universalApk true
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
    compile files('libs/thinkandroid-1.1-bin.jar')
    compile 'com.google.code.gson:gson:2.6.2'
}


applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def newName
        def oldFile = output.outputFile
        def outDirectory = oldFile.parent
        def buildPrefix
        def showVersion
        if (variant.buildType.name == 'debug') {
            buildPrefix = BUILD_PREFIX
        } else {
            buildPrefix = BUILD_PREFIX_RELEASE
        }
        def jenkinsTime = JENKINS_TIME
        if (variant.buildType.name == 'debug') {
            showVersion = buildPrefix + '_' + jenkinsTime + '_' + DAY_VERSION
        } else {
            showVersion = APP_VERSION
        }
        resValue("string", 'fund_app_version', showVersion)
        def tempFile = file("build.gradle")
        outDirectory = tempFile.parent + '/apks'
        if (IS_JENKINS) {
            newName = buildPrefix + '_' + jenkinsTime + '_' + DAY_VERSION + '.apk'
        } else {

            newName = 'android-v' +
                    APP_VERSION + '-' + variant.productFlavors[0].name + '-' + variant.buildType.name + '.apk'
        }

        output.outputFile = new File(outDirectory, newName)

    }
}